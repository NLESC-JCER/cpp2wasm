# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: [push, pull_request]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  cpp:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Should not be needed anymore when https://github.com/NLESC-JCER/cpp2wasm/issues/1 is fixed
    - name: Generate source code
      uses: docker://nlesc/pandoc-tangle@0.5.0
      with:
        args: --preserve-tabs README.md INSTALL.md

    # Should not be needed anymore when https://github.com/entangled/filters/issues/2 is fixed
    - name: Correct Makefile
      run: perl -pi -e 's/    /\t/' Makefile

    - name: Run C++ examples
      run: make test-cli test-cgi
  python:
      # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Redis is needed for Celery
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Should not be needed anymore when https://github.com/NLESC-JCER/cpp2wasm/issues/1 is fixed
    - name: Generate source code
      uses: docker://nlesc/pandoc-tangle
      with:
        args: README.md INSTALL.md

    # Should not be needed anymore when https://github.com/entangled/filters/issues/2 is fixed
    - name: Correct Makefile
      run: perl -pi -e 's/    /\t/' Makefile

    - uses: actions/setup-python@v1
      with:
        python-version: '3.x' # Version range or exact version of a Python version to use, using SemVer's version range syntax
        architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified

    - name: Install Python dependencies
      run: make py-deps && pip install httpie

    - name: Run Python example
      run: make test-py

    - name: Start web application in background
      run: make run-webapp &

    - name: Test web application
      run: http --ignore-stdin -f localhost:5001 epsilon=0.001 guess=-20

    - name: Start web service in background
      run: make run-webservice &

    - name: Test web service
      run: make test-webservice

    - name: Start Celery web app in background
      run: make run-celery-webapp &

    - name: Start Celery worker in background
      run: |
        cd src/py
        PYTHONPATH=$PWD/../.. celery -A tasks worker &
        cd ../..

    - name: Test Celery web app
      run: |
        http --ignore-stdin -hf localhost:5000 epsilon=0.001 guess=-20 | tee response.txt
        # Parse result url from response
        RESULT_URL=$(cat response.txt |grep Location |awk '{print $2}')
        sleep 2
        http --ignore-stdin $RESULT_URL
  wasm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Should not be needed anymore when https://github.com/NLESC-JCER/cpp2wasm/issues/1 is fixed
      - name: Generate source code
        uses: docker://nlesc/pandoc-tangle
        with:
          args: README.md INSTALL.md

      - name: Install emscripten
        uses: mymindstorm/setup-emsdk@v4

      - name: Build WebAssembly module
        run: make build-wasm

      - name: Start web server for hosting files in background
        run: make host-files &

      - name: Run tests
        run: make test-wasm
