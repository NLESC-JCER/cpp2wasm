# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: [push, pull_request]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  entangle:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Check all entangled files are in sync with Markdown
        run: make check
  sonarcloud:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: "x64"
    - name: Install Python dependencies
      run: make py-deps
    - name: Install emscripten
      uses: mymindstorm/setup-emsdk@v6
      with:
        version: 1.39.17
        actions-cache-folder: 'emsdk-cache'
    - name: Cache SonarCloud Build Wrapper
      id: cache-bw
      uses: actions/cache@v2
      with:
        path: build-wrapper-linux-x86
        key: ${{ runner.os }}-bw
    - name: Install SonarCloud Build Wrapper
      if: steps.cache-bw.outputs.cache-hit != 'true'
      run: |
        wget https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip
        unzip build-wrapper-linux-x86.zip
        rm -f build-wrapper-linux-x86.zip
    - name: Remove all compiled files
      run: make clean-compiled
    - name: Compile C++ files using wrapper
      run: ./build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir bw-output make all
    - name: Restore wasm
      # As we want to analyse files in git not files we just build
      run: git restore webassembly/newtonraphsonwasm.js webassembly/newtonraphsonwasm.wasm
    - name: Relativize bw-output
      # Build wrapper runs on CI server while sonar-scanner runs in Docker container need to adjust paths
      run: perl -pi -e 's@/home/runner/work/cpp2wasm/cpp2wasm@/github/workspace@g' bw-output/build-wrapper-dump.json
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  cli:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Run C++ test for CLI
        run: make test-cli
  cgi:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Run C++ test for CGI
        run: make test-cgi
  openapi:
    # The type of runner that the job will run on
    name: openapi / python-${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
      fail-fast: true
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
          architecture: "x64"

      - name: Which Python
        run: which python

      - name: Install Python dependencies
        run: make openapi-deps

      - name: Run Python example
        run: make test-py

      - name: Start web service in background
        run: |
          make run-webservice 2>&1 | tee ./run-webservice.log &
          # Wait for web service to spin up
          sleep 1

      - name: Test web service
        run: make test-webservice

      - name: Upload log of services
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: openapi-service-logs
          path: ./run-*.log
  flask:
    # The type of runner that the job will run on
    name: flask / python-${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
      fail-fast: true
    # Redis is needed for Celery
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: "x64"

      - name: Which Python
        run: which python

      - name: Install Python dependencies
        run: make flask-deps && pip install httpie

      - name: Build shared library and link to it
        run: |
          make flask/newtonraphsonpy.*.so

      - name: Start web application in background
        run: |
          make run-webapp 2>&1 | tee ./run-webapp.log &
          # Wait for web application to spin up
          sleep 1

      - name: Test web application
        run: http --ignore-stdin -f localhost:5001 epsilon=0.001 guess=-20

      - name: Start Celery web app in background
        run: |
          make run-celery-webapp 2>&1 | tee ./run-celery-webapp.log  &

      - name: Start Celery worker in background
        run: |
          cd flask
          PYTHONPATH=$PWD/../.. celery -A tasks worker 2>&1 | tee ./run-celery-worker.log &
          cd ../..

      - name: Test Celery web app
        run: |
          # Wait for web celery app and worker to spin up
          sleep 1
          http --ignore-stdin -hf localhost:5000 epsilon=0.001 guess=-20 | tee response.txt
          # Parse result url from response
          RESULT_URL=$(cat response.txt |grep Location |awk '{print $2}')
          sleep 2
          http --ignore-stdin $RESULT_URL

      - name: Upload log of services
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: flask-service-logs
          path: ./run-*.log
  webassembly:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install emscripten
        uses: mymindstorm/setup-emsdk@v5
        with:
          version: 1.39.17
          actions-cache-folder: 'emsdk-cache'

      - name: Build WebAssembly module
        run: make build-wasm

      - name: Test from command line
        run: make test-wasm-cli

      - name: Start web server for hosting files in background
        run: make host-webassembly-files 2>&1 | tee ./run-host-service.log &

      - name: Run tests
        run: make test-webassembly

      - name: Install Node.js dependencies
        run: make js-deps

      - name: Start web service in background
        run: make run-js-webservice 2>&1 | tee ./run-web-service.log &

      - name: Test web service
        run: make test-js-webservice

      - name: Test web service with invalid request
        run: make test-js-webservice-invalid || test $? -eq 2

      - name: Start OpenAPI web service in background
        run: make run-js-openapi 2>&1 | tee ./run-openapi-web-service.log &

      - name: Test OpenAPI web service
        run: make test-js-openapi

      - name: Start OpenAPI threaded web service in background
        run: make run-js-threaded 2>&1 | tee ./run-threaded-web-service.log &

      - name: Test OpenAPI threaded web service
        run: make test-js-threaded

      - name: Upload log of services
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: webassembly-service-logs
          path: ./run-*.log
  react:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install emscripten
        uses: mymindstorm/setup-emsdk@v4

      - name: Build WebAssembly module and link to it from react/
        run: make react/newtonraphsonwasm.js react/newtonraphsonwasm.wasm

      - name: Start web server for hosting files in background
        run: make host-react-files 2>&1 | tee ./web-server.log &

      - name: Run tests
        run: make test-react

      - name: Upload log of web server
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: react-service-log
          path: ./web-server.log
